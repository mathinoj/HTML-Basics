<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Idiom</title>
        <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
            rel="stylesheet"
            integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65"
            crossorigin="anonymous"
        />
    </head>
    <body class="d-flex flex-column vh-100">
        <!-- with only d-flex, its a row. So it would look like navbar (onleft side) and View All cards to the right of it, like a 50/50 split screen -->
        <!-- W/ d-flex flex-column it sets the container to go from top to bottom, not left to right (row), like if it was just d-flex -->
        <!-- 100 view hieght units -->

        <%- include("../partials/navbar") %>
        <main class="container mt-5"><%- body %></main>
        <%- include("../partials/footer") %>
        <script
            src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
            crossorigin="anonymous"
        ></script>
        <script>
            // Example starter JavaScript for disabling form submissions if there are invalid fields
            (() => {
                "use strict";
                // The purpose of "use strict" is to indicate that the code should be executed in "strict mode". With strict mode, you can not, for example, use undeclared variables. Undeclared âˆ’ It occurs when a variable which hasn't been declared using var, let or const is being tried to access.

                const forms = document.querySelectorAll(".validated-form");
                // this selects all form with the class 'validated form'
                // Loop over them and prevent submission
                Array.from(forms).forEach((form) => {
                    //here we name the function 'form'
                    //Array.from(forms) makes an array from all inputs retrieved anywhere there was a FORM with the 'validated-form' class
                    //So basically it breaks down each <textarea> and <input> input. We use this to as part of the checking process.
                    //Then we run a forEach loop on the array to check for to see if any part of the form has empty values.
                    form.addEventListener(
                        "submit",
                        (event) => {
                            if (!form.checkValidity()) {
                                // checkValidity returns true if an input element contains valid data.
                                //here we are saying if the 'form' function that we named in the 'Array.from part', if that is NOT true - is NOT VALID (!form.checkValidity), then we WILL GO ONTO the NEXT STEPS.
                                //not true meaning there is NOTHING written in the inputs by the user
                                // IF form DOES contain all valid inputs then the form will submit and it WILL NOT go onto the next steps.
                                event.preventDefault();
                                // The event.preventDefault() method stops the default action of an element from happening. For example: Prevent a submit button from submitting a form OR Prevent a link from following the URL
                                // The event continues to propagate as usual, unless one of its event listeners calls stopPropagation()
                                event.stopPropagation();
                                // This prevents further propagation of the current event in the capturing and bubbling phases.
                                //SO in the form, to check if user left text in the <input>, the capture phase would go from the <form>to<div>to<input>. Then once inside the <input> it checks for TEXT. If there IS writtedn TEXT by the user then it propogates to the bubbling phase which then goes from <input>to<div>to<form>. HOWEVER, if there is no written TEXT in the <input> then no bubbling occurs, and the event.stopPropogation() stops the form from processing!
                            }

                            form.classList.add("was-validated");
                            // classList is a convenient alternative to accessing an element's list of classes as a space-delimited string (I asssume space-delimited string in this scenario is 'was-validated'). A delimiter is a character used to separate items in a string.
                            // classList returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list. The  DOMTokenList includes the add.() DOMToken.
                        },
                        false
                    );
                });
            })();
        </script>
        <script>
            const popoverTriggerList = document.querySelectorAll(
                '[data-bs-toggle="popover"]'
            );
            const popoverList = [...popoverTriggerList].map(
                (popoverTriggerEl) => new bootstrap.Popover(popoverTriggerEl)
            );
            // https://www.youtube.com/watch?v=HWeU6iE9NIg
            // https://getbootstrap.com/docs/5.2/components/popovers/
        </script>
    </body>
</html>
<!-- allows us to use layout and body -->
